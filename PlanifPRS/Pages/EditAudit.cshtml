@page "{id:int}"
@model PlanifPRS.Pages.Prs.EditAuditModel
@{
    ViewData["Title"] = "Modifier un Événement";
}

@section Styles {
    <link rel="stylesheet" href="~/css/create-prs.css" asp-append-version="true" />
    <style>
        .event-type-card {
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px solid transparent;
        }

            .event-type-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }

            .event-type-card.selected {
                border-color: #667eea;
                background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
            }
    </style>
}

<div class="page-container">
    @if (Model.Prs == null)
    {
        <div class="alert alert-danger alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <span>⚠️ Événement introuvable ou non autorisé.</span>
            </div>
            <div class="mt-2">
                <a asp-page="/Index" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Retour à l'accueil
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- En-tête moderne -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-edit"></i>
                @ViewData["Title"]
            </h1>
            <p class="page-subtitle">
                <i class="fas fa-pencil-alt me-1"></i>
                Modifiez un audit, une intervention ou une visite client
            </p>
        </div>

        <!-- Messages -->
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger alert-modern">
                <div>
                    <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                    <strong>Erreurs détectées :</strong>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div class="mt-1">• @error.ErrorMessage</div>
                    }
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Sélection du type d'événement -->
        <div class="mb-4">
            <h4 class="mb-3">
                <i class="fas fa-list-alt me-2"></i>
                Type d'événement
            </h4>
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="card event-type-card h-100" data-event-type="Audit">
                        <div class="card-body text-center">
                            <i class="fas fa-clipboard-check fa-3x text-danger mb-3"></i>
                            <h5 class="card-title">Audit</h5>
                            <p class="card-text text-muted">
                                Contrôle qualité, audit de processus, vérification conformité
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card event-type-card h-100" data-event-type="Intervention">
                        <div class="card-body text-center">
                            <i class="fas fa-tools fa-3x text-warning mb-3"></i>
                            <h5 class="card-title">Intervention</h5>
                            <p class="card-text text-muted">
                                Maintenance, réparation, intervention technique
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card event-type-card h-100" data-event-type="Visite Client">
                        <div class="card-body text-center">
                            <i class="fas fa-handshake fa-3x text-info mb-3"></i>
                            <h5 class="card-title">Visite Client</h5>
                            <p class="card-text text-muted">
                                Présentation, démonstration, visite d'installation
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Formulaire principal -->
        <div class="form-container">
            <form method="post" class="row g-3" id="edit-audit-form">
                <!-- Champs cachés -->
                <input type="hidden" asp-for="Prs.Id" />
                <input type="hidden" id="EventType" name="EventType" value="" />

                <div class="col-md-8">
                    <label class="form-label fw-bold">
                        <i class="fas fa-edit"></i>
                        Détails de l'événement *
                    </label>
                    <input type="text" id="EventDetails" name="EventDetails" class="form-control"
                           placeholder="Ex: Audit qualité ligne 1, Maintenance préventive, Présentation produit" required />
                    <div class="form-text">Décrivez précisément l'objet de cet événement</div>
                </div>

                <div class="col-md-4">
                    <label asp-for="Prs.LigneId" class="form-label fw-bold">
                        <i class="fas fa-industry"></i>
                        Ligne concernée *
                    </label>
                    <select asp-for="Prs.LigneId" asp-items="Model.LigneList" class="form-select" required>
                        <option value="">-- Choisir une ligne --</option>
                    </select>
                    <span asp-validation-for="Prs.LigneId" class="text-danger"></span>
                </div>

                <!-- Planification -->
                <div class="col-md-12">
                    <div class="card border-primary">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">
                                <i class="fas fa-clock me-2"></i>
                                Planification de l'événement
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label asp-for="Prs.DateDebut" class="form-label fw-bold">
                                        <i class="fas fa-calendar-alt text-primary"></i> Date et heure de début
                                    </label>
                                    <input asp-for="Prs.DateDebut" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateDebut.ToString("yyyy-MM-ddTHH:mm")" required />
                                </div>

                                <div class="col-md-6">
                                    <label asp-for="Prs.DateFin" class="form-label fw-bold">
                                        <i class="fas fa-calendar-check text-success"></i> Date et heure de fin
                                    </label>
                                    <input asp-for="Prs.DateFin" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateFin.ToString("yyyy-MM-ddTHH:mm")" required />
                                </div>
                            </div>

                            <div class="mt-3 p-3 bg-light rounded">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle text-info me-1"></i>
                                    Les événements sont automatiquement validés et n'ont pas besoin d'approbation.
                                </small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Informations complémentaires -->
                <div class="col-md-12">
                    <label asp-for="Prs.InfoDiverses" class="form-label">
                        <i class="fas fa-comment-alt"></i>
                        Informations complémentaires
                    </label>
                    <textarea asp-for="Prs.InfoDiverses" class="form-control" rows="3"
                              placeholder="Ajoutez toute information utile pour cet événement..."></textarea>
                </div>

                <!-- Champs cachés pour préserver les données -->
                <input type="hidden" asp-for="Prs.ReferenceProduit" />
                <input type="hidden" asp-for="Prs.Quantite" />
                <input type="hidden" asp-for="Prs.BesoinOperateur" />
                <input type="hidden" asp-for="Prs.PresenceClient" />
                <input type="hidden" asp-for="Prs.Statut" />
                <input type="hidden" asp-for="Prs.FamilleId" />
                <input type="hidden" asp-for="Prs.DateCreation" />

                <div class="col-12 text-center">
                    <button type="submit" class="btn btn-primary btn-lg px-5 me-3" id="submit-btn" disabled>
                        <i class="fas fa-save me-2"></i>
                        <span id="submit-text">Sélectionnez d'abord un type d'événement</span>
                    </button>
                    <a asp-page="/Index" class="btn btn-secondary btn-lg px-5">
                        <i class="fas fa-times me-2"></i>Annuler
                    </a>
                </div>
            </form>
        </div>
    }
</div>

<!-- Calendrier -->
<div class="calendar-section-title">
    <h4 class="calendar-standalone-title">
        <i class="fas fa-calendar-alt"></i>
        Visualisation du planning (créneaux existants)
    </h4>
</div>

@Html.Partial("_CalendarBlock")

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Variables globales
        const eventTypeInput = document.getElementById('EventType');
        const eventDetailsInput = document.getElementById('EventDetails');
        const ligneSelect = document.querySelector('select[name="Prs.LigneId"]');
        const submitBtn = document.getElementById('submit-btn');
        const submitText = document.getElementById('submit-text');
        const eventTypeCards = document.querySelectorAll('.event-type-card');

        // ✅ PRÉ-SÉLECTION DEPUIS LES DONNÉES EXISTANTES
                const preselectedType = '@Html.Raw(System.Net.WebUtility.HtmlDecode(ViewData["PreselectedEventType"]?.ToString() ?? ""))';
        const preselectedDetails = '@Html.Raw(System.Net.WebUtility.HtmlDecode(ViewData["PreselectedEventDetails"]?.ToString() ?? ""))';

        // Gestion de la sélection des types d'événements
        eventTypeCards.forEach(card => {
            card.addEventListener('click', function() {
                const eventType = this.getAttribute('data-event-type');
                selectEventType(eventType, this);
            });
        });

        function selectEventType(eventType, cardElement) {
            // Supprimer la sélection précédente
            eventTypeCards.forEach(c => c.classList.remove('selected'));

            // Sélectionner la nouvelle carte
            cardElement.classList.add('selected');

            // Mettre à jour les champs
            eventTypeInput.value = eventType;

            // ✅ APPELER updateSubmitButton IMMÉDIATEMENT
            updateSubmitButton();

            // Animation
            cardElement.style.transform = 'scale(0.95)';
            setTimeout(() => {
                cardElement.style.transform = '';
            }, 150);

            // Focus sur détails si vide
            if (!eventDetailsInput.value.trim()) {
                setTimeout(() => {
                    eventDetailsInput.focus();
                }, 200);
            }
        }

        // ✅ FONCTION DE VALIDATION COMPLÈTE (DÉTAILS OBLIGATOIRES)
        function updateSubmitButton() {
            const hasEventType = eventTypeInput.value.trim() !== '';
            const hasEventDetails = eventDetailsInput.value.trim() !== '';
            const hasLigne = ligneSelect.value.trim() !== '';

            // ✅ TOUTES LES 3 CONDITIONS REQUISES
            if (hasEventType && hasEventDetails && hasLigne) {
                submitBtn.disabled = false;
                submitBtn.className = 'btn btn-success btn-lg px-5 me-3';
                submitText.textContent = `Modifier ${eventTypeInput.value}`;
            }
            // ✅ ÉTAPES DE VALIDATION PROGRESSIVE
            else if (!hasEventType) {
                submitBtn.disabled = true;
                submitBtn.className = 'btn btn-primary btn-lg px-5 me-3';
                submitText.textContent = 'Sélectionnez d\'abord un type d\'événement';
            }
            else if (!hasEventDetails) {
                submitBtn.disabled = true;
                submitBtn.className = 'btn btn-warning btn-lg px-5 me-3';
                submitText.textContent = 'Saisissez les détails de l\'événement';
            }
            else if (!hasLigne) {
                submitBtn.disabled = true;
                submitBtn.className = 'btn btn-info btn-lg px-5 me-3';
                submitText.textContent = 'Sélectionnez une ligne';

                // ✅ METTRE EN ÉVIDENCE LE SELECT LIGNE
                ligneSelect.style.borderColor = '#0dcaf0';
                ligneSelect.style.boxShadow = '0 0 0 0.2rem rgba(13, 202, 240, 0.25)';
            }
        }

        // ✅ ÉVÉNEMENTS DE VALIDATION AVEC DÉTAILS OBLIGATOIRES
        eventDetailsInput.addEventListener('input', function() {
            // ✅ VALIDATION À CHAQUE SAISIE
            updateSubmitButton();
        });

        ligneSelect.addEventListener('change', function() {
            // Enlever la mise en évidence
            this.style.borderColor = '';
            this.style.boxShadow = '';

            // ✅ APPELER updateSubmitButton QUAND ON CHANGE DE LIGNE
            updateSubmitButton();
        });

        // ✅ INITIALISATION AVEC DONNÉES EXISTANTES
        document.addEventListener('DOMContentLoaded', function() {
            // Pré-sélectionner le type d'événement depuis les données
            if (preselectedType) {
                const targetCard = document.querySelector(`[data-event-type="${preselectedType}"]`);
                if (targetCard) {
                    selectEventType(preselectedType, targetCard);
                }
            }

            // Pré-remplir les détails depuis les données
            if (preselectedDetails) {
                eventDetailsInput.value = preselectedDetails;
            }

            // Animation d'entrée
            eventTypeCards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    card.style.transition = 'all 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // ✅ VALIDATION INITIALE FORCÉE
            setTimeout(() => {
                updateSubmitButton();
            }, 500);
        });

        // ✅ VALIDATION RENFORCÉE DU FORMULAIRE
        document.getElementById('edit-audit-form').addEventListener('submit', function(e) {
            if (!eventTypeInput.value) {
                e.preventDefault();
                showValidationError('Veuillez sélectionner un type d\'événement');
                return false;
            }

            // ✅ VALIDATION DÉTAILS OBLIGATOIRE
            if (!eventDetailsInput.value.trim()) {
                e.preventDefault();
                showValidationError('Veuillez saisir les détails de l\'événement');
                eventDetailsInput.focus();
                eventDetailsInput.style.borderColor = '#dc3545';
                eventDetailsInput.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                return false;
            }

            if (!ligneSelect.value) {
                e.preventDefault();
                showValidationError('Veuillez sélectionner une ligne');
                ligneSelect.focus();
                ligneSelect.style.borderColor = '#dc3545';
                ligneSelect.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                return false;
            }

            // ✅ VALIDATION DES DATES
            const dateDebut = new Date(document.querySelector('input[name="Prs.DateDebut"]').value);
            const dateFin = new Date(document.querySelector('input[name="Prs.DateFin"]').value);

            if (dateFin <= dateDebut) {
                e.preventDefault();
                showValidationError('La date de fin doit être postérieure à la date de début');
                return false;
            }

            // Animation de soumission
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Modification en cours...';
            submitBtn.disabled = true;
        });

        // ✅ FONCTION D'AFFICHAGE DES ERREURS
        function showValidationError(message) {
            const notification = document.createElement('div');
            notification.className = 'alert alert-danger alert-dismissible fade show position-fixed';
            notification.style.cssText = 'top: 100px; right: 20px; z-index: 9999; min-width: 350px;';
            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Erreur de validation :</strong> ${message}
                    <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        // Synchronisation des dates
        const dateDebutInput = document.querySelector('input[name="Prs.DateDebut"]');
        const dateFinInput = document.querySelector('input[name="Prs.DateFin"]');

        dateDebutInput.addEventListener('change', function() {
            const dateDebut = new Date(this.value);
            const dateFin = new Date(dateFinInput.value);

            if (dateFin <= dateDebut) {
                const newDateFin = new Date(dateDebut.getTime() + (2 * 60 * 60 * 1000));
                dateFinInput.value = newDateFin.toISOString().slice(0, 16);
            }
        });

        dateFinInput.addEventListener('change', function() {
            const dateDebut = new Date(dateDebutInput.value);
            const dateFin = new Date(this.value);

            if (dateFin <= dateDebut) {
                this.style.borderColor = '#dc3545';
                this.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
            } else {
                this.style.borderColor = '';
                this.style.boxShadow = '';
            }
        });
    </script>
}