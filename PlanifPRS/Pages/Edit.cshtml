@page "{id:int}"
@model PlanifPRS.Pages.EditModel
@{
    ViewData["Title"] = "Modifier une PRS";

    // Vérifier si l'utilisateur peut modifier cette PRS
    var canEdit = Model.CanEditPrs;
    var isAdminOrValidateur = Model.IsAdminOrValidateur;
    var isCreator = !string.IsNullOrEmpty(Model.Prs.CreatedByLogin) &&
                   Model.Prs.CreatedByLogin.Equals(Model.CurrentUserLogin, StringComparison.OrdinalIgnoreCase);
}

@section Styles {
    <!-- CSS EXTERNE COMPLET -->
    <link rel="stylesheet" href="~/css/create-prs.css" asp-append-version="true" />

    <style>
        .readonly-field {
            background-color: #f8f9fa !important;
            opacity: 0.85;
            cursor: not-allowed !important;
            pointer-events: none;
        }

        .permissions-banner {
            background-color: #f8d7da;
            color: #721c24;
            padding: 0.75rem 1.25rem;
            margin-bottom: 1rem;
            border: 1px solid #f5c6cb;
            border-radius: 0.25rem;
        }

        /* Styles spécifiques pour la sélection de semaine */
        .week-selector {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.375rem 0.75rem;
            background-color: #f8f9fa;
        }

            .week-selector .week-navigation {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 10px;
            }

            .week-selector .week-info {
                font-weight: bold;
                text-align: center;
            }

        .week-view {
            background-color: #e9ecef;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            margin-bottom: 10px;
        }

        .week-days {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
        }

        .week-day {
            flex: 1;
            text-align: center;
            padding: 8px 4px;
            font-size: 0.9em;
            border-radius: 4px;
            background-color: #fff;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

            .week-day .day-number {
                font-weight: bold;
                color: #495057;
            }

            .week-day .day-name {
                font-size: 0.85em;
                color: #6c757d;
            }

        .week-selected {
            background-color: #d1ecf1;
            border: 2px solid #17a2b8;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .week-highlight {
            font-weight: bold;
            color: #0c5460;
            font-size: 1.1em;
        }

        .creator-badge {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            margin-bottom: 1rem;
        }

            .creator-badge i {
                margin-right: 5px;
                color: #6c757d;
            }
    </style>
}

<div class="page-container">
    <!-- En-tête moderne -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-edit"></i>
            @ViewData["Title"] #@Model.Prs.Id
        </h1>
        <p class="page-subtitle">
            <i class="fas fa-info-circle me-1"></i>
            @(canEdit ? "Modifiez les détails de votre planification existante" : "Consultation en lecture seule")
        </p>

        <!-- Information sur les permissions -->
        <div class="d-flex flex-wrap align-items-center mt-2">
            @if (isAdminOrValidateur)
            {
                <span class="badge bg-primary me-2">
                    <i class="fas fa-user-shield"></i>
                    Admin/Validateur
                </span>
            }

            @if (isCreator)
            {
                <span class="badge bg-success me-2">
                    <i class="fas fa-user-edit"></i>
                    Créateur
                </span>
            }

            <span class="badge @(canEdit ? "bg-success" : "bg-warning") me-2">
                <i class="fas @(canEdit ? "fa-check-circle" : "fa-eye")"></i>
                @(canEdit ? "Modification autorisée" : "Lecture seule")
            </span>
        </div>

        <!-- Info créateur -->
        @if (!string.IsNullOrEmpty(Model.Prs.CreatedByLogin))
        {
            <div class="creator-badge mt-2">
                <i class="fas fa-user-edit"></i>
                <span>Créée par : <strong>@Model.Prs.CreatedByLogin</strong></span>
                <span class="ms-2 text-muted">
                    (@Model.Prs.DateCreation.ToString("dd/MM/yyyy HH:mm"))
                </span>
            </div>
        }
    </div>

    <!-- Alerte si l'utilisateur ne peut pas modifier -->
    @if (!canEdit)
    {
        <div class="permissions-banner">
            <div class="d-flex align-items-center">
                <i class="fas fa-lock me-2 fs-5"></i>
                <span>
                    <strong>Accès en lecture seule :</strong>
                    Vous ne disposez pas des droits nécessaires pour modifier cette PRS.
                    Seul le créateur, les administrateurs et les validateurs peuvent effectuer des modifications.
                </span>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Flash))
    {
        <div class="alert alert-success alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle me-2 fs-5"></i>
                <span>@Model.Flash</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-modern">
            <div>
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <strong>Erreurs détectées :</strong>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div class="mt-1">• @error.ErrorMessage</div>
                }
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Formulaire principal -->
    <div class="form-container">
        <form method="post" class="row g-3" id="edit-form">
            <input type="hidden" asp-for="Prs.Id" />
            <input type="hidden" asp-for="Prs.DateCreation" />
            <input type="hidden" asp-for="Prs.CreatedByLogin" />

            <div class="col-md-6">
                <label asp-for="Prs.Titre" class="form-label">
                    <i class="fas fa-tag"></i>
                    Titre de la PRS
                </label>
                <input asp-for="Prs.Titre" class="form-control @(!canEdit ? "readonly-field" : "")"
                       readonly="@(!canEdit)"
                       placeholder="Ex: Maintenance préventive ligne 1" />
                <span asp-validation-for="Prs.Titre" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.Equipement" class="form-label">
                    <i class="fas fa-cogs"></i>
                    Type d'équipement
                </label>
                <select asp-for="Prs.Equipement" class="form-select @(!canEdit ? "readonly-field" : "")" disabled="@(!canEdit)">
                    <option value="">-- Sélectionner un type --</option>
                    <option value="CMS" selected="@(Model.Prs.Equipement == "CMS" || Model.Prs.Equipement == "🏭 CMS")">🏭 CMS</option>
                    <option value="Finition" selected="@(Model.Prs.Equipement == "Finition" || Model.Prs.Equipement == "✨ Finition")">✨ Finition</option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.ReferenceProduit" class="form-label">
                    <i class="fas fa-barcode"></i>
                    Référence produit
                </label>
                <input asp-for="Prs.ReferenceProduit" class="form-control @(!canEdit ? "readonly-field" : "")"
                       readonly="@(!canEdit)"
                       placeholder="Ex: REF-2025-001" />
            </div>

            <div class="col-md-3">
                <label asp-for="Prs.Quantite" class="form-label">
                    <i class="fas fa-hashtag"></i>
                    Quantité
                </label>
                <input asp-for="Prs.Quantite" type="number" min="1" class="form-control @(!canEdit ? "readonly-field" : "")"
                       readonly="@(!canEdit)"
                       placeholder="1" />
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.BesoinOperateur" class="form-label">
                    <i class="fas fa-user-hard-hat"></i>
                    Besoin opérateur
                </label>
                <select asp-for="Prs.BesoinOperateur" class="form-select @(!canEdit ? "readonly-field" : "")" disabled="@(!canEdit)">
                    <option value="">-- Sélectionner --</option>
                    <option value="Besoin opérateur"
                            selected="@(Model.Prs.BesoinOperateur == "Besoin opérateur" || Model.Prs.BesoinOperateur == "👨‍🔧 Besoin opérateur")">
                        👨‍🔧 Besoin opérateur
                    </option>
                    <option value="Aucun"
                            selected="@(Model.Prs.BesoinOperateur == "Aucun" || Model.Prs.BesoinOperateur == "❌ Aucun")">
                        ❌ Aucun
                    </option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.PresenceClient" class="form-label">
                    <i class="fas fa-user-tie"></i>
                    Présence client
                </label>
                <select asp-for="Prs.PresenceClient" class="form-select @(!canEdit ? "readonly-field" : "")" disabled="@(!canEdit)">
                    <option value="">-- Sélectionner --</option>
                    <option value="Client présent"
                            selected="@(Model.Prs.PresenceClient == "Client présent" || Model.Prs.PresenceClient == "✅ Client présent")">
                        ✅ Client présent
                    </option>
                    <option value="Client absent"
                            selected="@(Model.Prs.PresenceClient == "Client absent" || Model.Prs.PresenceClient == "❌ Client absent")">
                        ❌ Client absent
                    </option>
                    <option value="Non spécifié"
                            selected="@(Model.Prs.PresenceClient == "Non spécifié" || Model.Prs.PresenceClient == "❓ Non spécifié")">
                        ❓ Non spécifié
                    </option>
                </select>
            </div>

            @if (canEdit)
            {
                @if (isAdminOrValidateur)
                {
                    <!-- Sélection de date précise pour admin/validateur -->
                    <div class="col-md-6">
                        <label asp-for="Prs.DateDebut" class="form-label fw-bold">
                            <i class="fas fa-calendar-alt text-primary"></i> Date et heure de début
                        </label>
                        <input asp-for="Prs.DateDebut" type="datetime-local" class="form-control"
                               value="@Model.Prs.DateDebut.ToString("yyyy-MM-ddTHH:mm")" />
                        <span asp-validation-for="Prs.DateDebut" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="Prs.DateFin" class="form-label fw-bold">
                            <i class="fas fa-calendar-check text-success"></i> Date et heure de fin
                        </label>
                        <input asp-for="Prs.DateFin" type="datetime-local" class="form-control"
                               value="@Model.Prs.DateFin.ToString("yyyy-MM-ddTHH:mm")" />
                        <span asp-validation-for="Prs.DateFin" class="text-danger"></span>
                    </div>
                }
                else
                {
                    <!-- Champ caché pour le mode semaine -->
                    <input type="hidden" name="weekMode" id="weekMode" value="true" />
                    <input type="hidden" name="selectedWeek" id="selectedWeek" value="" />

                    <!-- Sélection de semaine pour utilisateurs normaux -->
                    <div class="col-md-12">
                        <label class="form-label fw-bold">
                            <i class="fas fa-calendar-week text-primary"></i> Sélection de la semaine
                        </label>
                        <div class="week-selector">
                            <div class="week-navigation">
                                <button type="button" class="btn btn-sm btn-outline-secondary" id="prevWeek">
                                    <i class="fas fa-chevron-left"></i> Semaine précédente
                                </button>
                                <div class="week-info" id="weekInfo">Semaine en cours</div>
                                <button type="button" class="btn btn-sm btn-outline-secondary" id="nextWeek">
                                    Semaine suivante <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>

                            <div class="week-view">
                                <div class="week-days" id="weekDays"></div>
                            </div>

                            <div class="week-selected" id="weekSelected">
                                <p class="mb-0">Vous avez sélectionné:</p>
                                <p class="week-highlight mb-0" id="weekHighlight">Semaine du 7 au 13 juillet 2025</p>
                                <small class="text-muted">La PRS sera créée pour toute la semaine (lundi 00:00 au lundi suivant 00:00)</small>
                            </div>
                        </div>
                    </div>

                    <!-- Champs cachés pour les dates (pour compatibilité) -->
                    <input type="hidden" asp-for="Prs.DateDebut" id="hiddenDateDebut" />
                    <input type="hidden" asp-for="Prs.DateFin" id="hiddenDateFin" />
                }
            }
            else
            {
                <!-- Affichage en lecture seule des dates -->
                <div class="col-md-6">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar-alt text-primary"></i> Période planifiée
                    </label>
                    <div class="bg-light p-3 rounded border">
                        <div class="d-flex align-items-center mb-2">
                            <i class="fas fa-play-circle text-success me-2"></i>
                            <strong>Début :</strong>
                            <span class="ms-2">@Model.Prs.DateDebut.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                        <div class="d-flex align-items-center">
                            <i class="fas fa-stop-circle text-danger me-2"></i>
                            <strong>Fin :</strong>
                            <span class="ms-2">@Model.Prs.DateFin.ToString("dd/MM/yyyy HH:mm")</span>
                        </div>
                    </div>
                </div>
            }

            <div class="col-md-6">
                <label asp-for="Prs.LigneId" class="form-label">
                    <i class="fas fa-industry"></i>
                    Ligne
                </label>
                <select asp-for="Prs.LigneId" asp-items="Model.LigneList" class="form-select @(!canEdit ? "readonly-field" : "")"
                        id="ligne-select" disabled="@(!canEdit)" required>
                    <option value="">-- Choisir une ligne --</option>
                </select>
                <span asp-validation-for="Prs.LigneId" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.FamilleId" class="form-label">
                    <i class="fas fa-layer-group"></i>
                    Famille de produit
                </label>
                <select asp-for="Prs.FamilleId" class="form-select @(!canEdit ? "readonly-field" : "")" disabled="@(!canEdit)">
                    <option value="">-- Aucune famille --</option>
                    @foreach (var fam in Model.Familles)
                    {
                        <option value="@fam.Id" selected="@(Model.Prs.FamilleId == fam.Id)">@fam.Libelle</option>
                    }
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.Statut" class="form-label">
                    <i class="fas fa-flag"></i>
                    Statut
                </label>
                <select asp-for="Prs.Statut" class="form-select @(!canEdit ? "readonly-field" : "")" disabled="@(!canEdit)">
                    <option value="En attente"
                            selected="@(Model.Prs.Statut == "En attente" || Model.Prs.Statut == "⏳ En attente")">
                        ⏳ En attente
                    </option>
                    <option value="Validé"
                            selected="@(Model.Prs.Statut == "Validé" || Model.Prs.Statut == "✅ Validé")">
                        ✅ Validé
                    </option>
                    <option value="En retard"
                            selected="@(Model.Prs.Statut == "En retard" || Model.Prs.Statut == "⚠️ En retard")">
                        ⚠️ En retard
                    </option>
                </select>
            </div>

            @if (isAdminOrValidateur && canEdit)
            {
                <div class="col-md-6">
                    <label asp-for="Prs.CouleurPRS" class="form-label">
                        <i class="fas fa-palette"></i>
                        Couleur PRS
                        <span class="badge bg-warning text-dark ms-2">Admin/Validateur</span>
                    </label>
                    <div class="input-group">
                        <input asp-for="Prs.CouleurPRS" type="color" class="form-control form-control-color"
                               style="width: 60px; height: 38px;"
                               value="@(string.IsNullOrEmpty(Model.Prs.CouleurPRS) ? "#007bff" : Model.Prs.CouleurPRS)" />
                        <input asp-for="Prs.CouleurPRS" type="text" class="form-control"
                               placeholder="#FF5733" pattern="^#[0-9A-Fa-f]{6}$"
                               value="@Model.Prs.CouleurPRS" />
                        <button type="button" class="btn btn-outline-secondary" id="clearColor">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <small class="form-text text-muted">
                        <i class="fas fa-info-circle"></i>
                        Choisissez une couleur personnalisée pour cette PRS (optionnel)
                    </small>
                </div>
            }
            else if (!string.IsNullOrEmpty(Model.Prs.CouleurPRS))
            {
                <div class="col-md-6">
                    <label class="form-label">
                        <i class="fas fa-palette"></i>
                        Couleur PRS
                    </label>
                    <div class="input-group">
                        <input type="color" class="form-control form-control-color readonly-field"
                               style="width: 60px; height: 38px;" readonly
                               value="@Model.Prs.CouleurPRS" />
                        <input type="text" class="form-control readonly-field" readonly
                               value="@Model.Prs.CouleurPRS" />
                    </div>
                </div>
            }

            <div class="col-md-12">
                <label asp-for="Prs.InfoDiverses" class="form-label">
                    <i class="fas fa-comment-alt"></i>
                    Informations complémentaires
                </label>
                <textarea asp-for="Prs.InfoDiverses" class="form-control @(!canEdit ? "readonly-field" : "")"
                          readonly="@(!canEdit)"
                          rows="3"
                          placeholder="Ajoutez toute information utile pour cette PRS..."></textarea>
            </div>

            <div class="col-12 text-center">
                @if (canEdit)
                {
                    <button type="submit" class="btn btn-primary btn-lg px-5 me-3">
                        <i class="fas fa-save me-2"></i>Enregistrer les modifications
                    </button>
                }
                <a href="javascript:history.back()" class="btn btn-secondary btn-lg px-5">
                    <i class="fas @(canEdit ? "fa-times" : "fa-arrow-left") me-2"></i>@(canEdit ? "Annuler" : "Retour")
                </a>
            </div>
        </form>
    </div>
</div>
<!-- FIN ABSOLUE du page-container ICI -->
<!-- TITRE STYLÉ DU CALENDRIER -->
<div class="calendar-section-title">
    <h4 class="calendar-standalone-title">
        <i class="fas fa-calendar-alt"></i>
        Visualisation du planning (créneaux existants)
    </h4>
</div>

<!-- CALENDRIER SANS ARRIÈRE-PLAN -->
@Html.Partial("_CalendarBlock")

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Déterminer si l'utilisateur est admin ou validateur et s'il peut éditer
        const isAdminOrValidateur = @Json.Serialize(isAdminOrValidateur);
        const canEdit = @Json.Serialize(canEdit);

        // Variables globales
        const dateDebutInput = document.querySelector("#Prs_DateDebut");
        const dateFinInput = document.querySelector("#Prs_DateFin");
        const ligneSelect = document.querySelector("#ligne-select");

        // Sélecteurs spécifiques pour le mode semaine
        const hiddenDateDebutInput = document.querySelector("#hiddenDateDebut");
        const hiddenDateFinInput = document.querySelector("#hiddenDateFin");
        const weekInfoElem = document.querySelector("#weekInfo");
        const weekDaysElem = document.querySelector("#weekDays");
        const weekHighlightElem = document.querySelector("#weekHighlight");
        const selectedWeekInput = document.querySelector("#selectedWeek");

        // Variable pour la semaine sélectionnée (pour utilisateurs normaux)
        let currentWeekStart;

        // Initialisation du sélecteur de semaine pour les utilisateurs non-admin avec droits d'édition
        if (canEdit && !isAdminOrValidateur && weekInfoElem && weekDaysElem) {
            // Date de début actuelle pour initialiser la sélection de semaine
            currentWeekStart = getMonday(new Date(@Json.Serialize(Model.Prs.DateDebut)));

            // Initialisation de l'interface de sélection de semaine
            initWeekSelector();

            // Mise à jour initiale des champs cachés
            updateHiddenDateFields();
        }

        // Fonction pour obtenir le lundi d'une semaine donnée
        function getMonday(date) {
            const d = new Date(date);
            const day = d.getDay();
            const diff = d.getDate() - day + (day === 0 ? -6 : 1);
            return new Date(d.setDate(diff));
        }

        // Formater la date en texte français
        function formatDateFr(date) {
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('fr-FR', options);
        }

        // Formatage du nom du jour en français
        function getDayName(date) {
            return date.toLocaleDateString('fr-FR', { weekday: 'short' });
        }

        // Initialisation du sélecteur de semaine
        function initWeekSelector() {
            // Mettre à jour l'affichage de la semaine actuelle
            updateWeekDisplay();

            // Ajouter des écouteurs d'événements pour la navigation
            document.getElementById('prevWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);
                updateWeekDisplay();
            });

            document.getElementById('nextWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
                updateWeekDisplay();
            });
        }

        // Mettre à jour l'affichage de la semaine
        function updateWeekDisplay() {
            if (!weekInfoElem || !weekDaysElem || !weekHighlightElem) return;

            // Mettre à jour l'info de la semaine
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6); // Dimanche

            weekInfoElem.textContent = `Semaine ${getWeekNumber(currentWeekStart)} - ${currentWeekStart.getFullYear()}`;
            weekHighlightElem.textContent = `Semaine du ${formatDateFr(currentWeekStart)} au ${formatDateFr(weekEnd)}`;

            // Mettre à jour le champ caché avec la date du lundi
            if (selectedWeekInput) {
                selectedWeekInput.value = currentWeekStart.toISOString();
            }

            // Générer l'affichage des jours de la semaine
            weekDaysElem.innerHTML = '';

            for (let i = 0; i < 7; i++) {
                const day = new Date(currentWeekStart);
                day.setDate(day.getDate() + i);

                // Créer l'élément jour
                const dayElement = document.createElement('div');
                dayElement.className = 'week-day';

                const dayName = getDayName(day);
                const dayNumber = day.getDate();

                dayElement.innerHTML = `
                    <div class="day-name">${dayName}</div>
                    <div class="day-number">${dayNumber}</div>
                `;

                weekDaysElem.appendChild(dayElement);
            }

            // Mise à jour des champs cachés
            updateHiddenDateFields();
        }

        // Obtenir le numéro de semaine d'une date
        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
        }

        // Mettre à jour les champs cachés pour la semaine entière
        function updateHiddenDateFields() {
            if (!currentWeekStart || !hiddenDateDebutInput || !hiddenDateFinInput) return;

            // La période va du lundi 00:00:00 au lundi suivant 00:00:00
            const mondayStart = new Date(currentWeekStart);
            mondayStart.setHours(0, 0, 0, 0);

            const nextMonday = new Date(mondayStart);
            nextMonday.setDate(nextMonday.getDate() + 7); // Lundi suivant à 00:00:00

            // Mettre à jour les champs cachés (format ISO)
            hiddenDateDebutInput.value = mondayStart.toISOString().slice(0, 16);
            hiddenDateFinInput.value = nextMonday.toISOString().slice(0, 16);
        }

        // Gestion du sélecteur de couleur pour les admins/validateurs
        const colorPicker = document.querySelector('input[type="color"]');
        const colorText = document.querySelector('input[type="text"][name="Prs.CouleurPRS"]');
        const clearButton = document.getElementById('clearColor');

        if (colorPicker && colorText) {
            colorPicker.addEventListener('change', function() {
                colorText.value = this.value;
            });

            colorText.addEventListener('input', function() {
                if (this.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                    colorPicker.value = this.value;
                }
            });

            if (clearButton) {
                clearButton.addEventListener('click', function() {
                    colorPicker.value = '#007bff';
                    colorText.value = '';
                });
            }
        }

        // Validation du formulaire
        document.querySelector("#edit-form")?.addEventListener("submit", function (e) {
            if (isAdminOrValidateur && dateDebutInput && dateFinInput) {
                // Validation des dates pour admin/validateur
                const dateDebut = new Date(dateDebutInput.value);
                const dateFin = new Date(dateFinInput.value);

                if (dateFin <= dateDebut) {
                    e.preventDefault();
                    alert('La date de début doit être antérieure à la date de fin.');
                    return false;
                }
            }

            // Vérification que la ligne est sélectionnée
            if (ligneSelect && !ligneSelect.value) {
                e.preventDefault();
                alert('Veuillez sélectionner une ligne.');
                ligneSelect.focus();
                return false;
            }
        });
    </script>
}