@page
@model PlanifPRS.Pages.Prs.CreateModel
@{
    ViewData["Title"] = "Créer une PRS";

    // Vérifier si l'utilisateur est admin ou validateur
    var isAdminOrValidateur = Model.IsAdminOrValidateur;
    var currentUserLogin = Model.CurrentUserLogin;
}

@section Styles {
    <!-- CSS EXTERNE COMPLET -->
    <link rel="stylesheet" href="~/css/create-prs.css" asp-append-version="true" />

    <style>
        /* Styles spécifiques pour la sélection de semaine */
        .week-selector {
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            padding: 0.375rem 0.75rem;
            background-color: #f8f9fa;
        }

            .week-selector .week-navigation {
                display: flex;
                align-items: center;
                justify-content: space-between;
                margin-bottom: 10px;
            }

            .week-selector .week-info {
                font-weight: bold;
                text-align: center;
            }

        .week-view {
            background-color: #e9ecef;
            border-radius: 4px;
            padding: 10px;
            text-align: center;
            margin-bottom: 10px;
        }

        .week-days {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
        }

        .week-day {
            flex: 1;
            text-align: center;
            padding: 8px 4px;
            font-size: 0.9em;
            border-radius: 4px;
            background-color: #fff;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

            .week-day .day-number {
                font-weight: bold;
                color: #495057;
            }

            .week-day .day-name {
                font-size: 0.85em;
                color: #6c757d;
            }

        .week-selected {
            background-color: #d1ecf1;
            border: 2px solid #17a2b8;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .week-highlight {
            font-weight: bold;
            color: #0c5460;
            font-size: 1.1em;
        }

        .disabled-field {
            background-color: #e9ecef !important;
            opacity: 0.7;
            cursor: not-allowed;
        }

        .creator-badge {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 6px 10px;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            margin-bottom: 1rem;
        }

            .creator-badge i {
                margin-right: 5px;
                color: #6c757d;
            }
            
        /* Styles pour la zone d'upload */
        .file-upload-container {
            border: 2px dashed #dee2e6;
            border-radius: 6px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
            background-color: #f8f9fa;
            position: relative;
        }

        .file-upload-container:hover, .file-upload-container.dragover {
            border-color: #007bff;
            background-color: #e3f2fd;
        }

        .file-upload-icon {
            font-size: 3rem;
            color: #6c757d;
            margin-bottom: 10px;
        }

        .file-upload-text {
            color: #495057;
        }

        .file-list {
            list-style-type: none;
            padding: 0;
            margin: 15px 0 0 0;
            max-height: 200px;
            overflow-y: auto;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .file-icon {
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .file-name {
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .file-size {
            margin-left: 10px;
            color: #6c757d;
            font-size: 0.85rem;
        }

        .remove-file {
            color: #dc3545;
            cursor: pointer;
            margin-left: 10px;
        }

        .file-upload-input {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .upload-limits {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .upload-limits i {
            margin-right: 5px;
        }

        .progress-container {
            width: 100%;
            height: 4px;
            background-color: #e9ecef;
            margin-top: 10px;
            border-radius: 2px;
            overflow: hidden;
            display: none;
        }

        .progress-bar {
            height: 100%;
            width: 0;
            background-color: #007bff;
            transition: width 0.3s ease;
        }
    </style>
}

<div class="page-container">
    <!-- En-tête moderne -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-plus-circle"></i>
            @ViewData["Title"]
        </h1>
        <p class="page-subtitle">
            <i class="fas fa-robot me-1"></i>
            Créez une nouvelle planification avec l'assistance intelligente de ROB.I.A
        </p>

        <!-- Badge créateur -->
        <div class="creator-badge">
            <i class="fas fa-user-edit"></i>
            <span>Créateur : <strong>@currentUserLogin</strong></span>
        </div>
    </div>

    <!-- Messages -->
    @if (!string.IsNullOrEmpty(Model.Flash))
    {
        <div class="alert alert-success alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-check-circle me-2 fs-5"></i>
                <span>@Model.Flash</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-modern">
            <div class="d-flex align-items-center">
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <span>@Model.ErrorMessage</span>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger alert-modern">
            <div>
                <i class="fas fa-exclamation-triangle me-2 fs-5"></i>
                <strong>Erreurs détectées :</strong>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div class="mt-1">• @error.ErrorMessage</div>
                }
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Formulaire principal -->
    <div class="form-container">
        <form method="post" class="row g-3" id="create-form" enctype="multipart/form-data">
            <input type="hidden" asp-for="Prs.Statut" id="Prs_Statut" value="@(isAdminOrValidateur ? "Validé" : "En attente")" />

            <!-- Champ caché pour le mode semaine -->
            @if (!isAdminOrValidateur)
            {
                <input type="hidden" name="weekMode" id="weekMode" value="true" />
                <input type="hidden" name="selectedWeek" id="selectedWeek" value="" />
            }

            <div class="col-md-6">
                <label asp-for="Prs.Titre" class="form-label">
                    <i class="fas fa-tag"></i>
                    Titre de la PRS
                </label>
                <input asp-for="Prs.Titre" class="form-control" placeholder="Ex: PRS Produit CMFB nouvelle version" />
                <span asp-validation-for="Prs.Titre" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.Equipement" class="form-label">
                    <i class="fas fa-cogs"></i>
                    Type d'équipement
                </label>
                <select asp-for="Prs.Equipement" class="form-select">
                    <option value="">-- Sélectionner un type --</option>
                    <option>CMS</option>
                    <option>Finition</option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.ReferenceProduit" class="form-label">
                    <i class="fas fa-barcode"></i>
                    Référence produit
                </label>
                <input asp-for="Prs.ReferenceProduit" class="form-control" placeholder="Ex: RE74782258" />
            </div>

            <div class="col-md-3">
                <label asp-for="Prs.Quantite" class="form-label">
                    <i class="fas fa-hashtag"></i>
                    Quantité
                </label>
                <input asp-for="Prs.Quantite" type="number" min="1" class="form-control" placeholder="1" />
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.BesoinOperateur" class="form-label">
                    <i class="fas fa-user-hard-hat"></i>
                    Besoin opérateur
                </label>
                <select asp-for="Prs.BesoinOperateur" class="form-select">
                    <option value="">-- Sélectionner --</option>
                    <option>Besoin opérateur</option>
                    <option>Aucun</option>
                </select>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.PresenceClient" class="form-label">
                    <i class="fas fa-user-tie"></i>
                    Présence client
                </label>
                <select asp-for="Prs.PresenceClient" class="form-select">
                    <option value="">-- Sélectionner --</option>
                    <option>Client présent</option>
                    <option>Client absent</option>
                    <option>Non spécifié</option>
                </select>
            </div>

            <!-- 🤖 SECTION ROB.I.A - PLANIFICATION INTELLIGENTE -->
            <div class="col-md-12">
                <div class="card robia-card border-info">
                    <div class="card-header bg-gradient-info text-white">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-robot robot-icon me-2 fs-5"></i>
                            <div>
                                <h6 class="mb-0">ROB.I.A - Planification Intelligente</h6>
                                <small>Rapid Optimal Booking Intelligent Assistant</small>
                            </div>
                            <div class="ms-auto">
                                <div class="robia-status-indicator">
                                    <span class="badge bg-success fs-6">
                                        <i class="fas fa-circle me-1"></i>Prêt
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body bg-light">
                        <div class="row g-3">
                            @if (isAdminOrValidateur)
                            {
                                <!-- Sélection de date précise pour admin/validateur -->
                                <div class="col-md-3">
                                    <label asp-for="Prs.DateDebut" class="form-label fw-bold">
                                        <i class="fas fa-calendar-alt text-primary"></i> Date et heure de début
                                    </label>
                                    <input asp-for="Prs.DateDebut" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateDebut.ToString("yyyy-MM-ddTHH:mm")" />
                                </div>

                                <div class="col-md-3">
                                    <label asp-for="Prs.DateFin" class="form-label fw-bold">
                                        <i class="fas fa-calendar-check text-success"></i> Date et heure de fin
                                    </label>
                                    <input asp-for="Prs.DateFin" type="datetime-local" class="form-control"
                                           value="@Model.Prs.DateFin.ToString("yyyy-MM-ddTHH:mm")" />
                                </div>
                                
                                <div class="col-md-3">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-clock text-warning"></i> Durée
                                    </label>
                                    <select id="duration-select" class="form-select">
                                        <option value="1">1 heure</option>
                                        <option value="2">2 heures</option>
                                        <option value="4">4 heures</option>
                                        <option value="8">8 heures</option>
                                        <option value="24">24 heures</option>
                                        <option value="48">2 jours</option>
                                        <option value="72">3 jours</option>
                                        <option value="168">1 semaine</option>
                                    </select>
                                </div>
                            }
                            else
                            {
                                <!-- Sélection de semaine pour utilisateurs normaux -->
                                <div class="col-md-6">
                                    <label class="form-label fw-bold">
                                        <i class="fas fa-calendar-week text-primary"></i> Sélection de la semaine
                                    </label>
                                    <div class="week-selector">
                                        <div class="week-navigation">
                                            <button type="button" class="btn btn-sm btn-outline-secondary" id="prevWeek">
                                                <i class="fas fa-chevron-left"></i> Semaine précédente
                                            </button>
                                            <div class="week-info" id="weekInfo">Semaine en cours</div>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" id="nextWeek">
                                                Semaine suivante <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </div>

                                        <div class="week-view">
                                            <div class="week-days" id="weekDays"></div>
                                        </div>

                                        <div class="week-selected" id="weekSelected">
                                            <p class="mb-0">Vous avez sélectionné:</p>
                                            <p class="week-highlight mb-0" id="weekHighlight">Semaine du 7 au 13 juillet 2025</p>
                                            <small class="text-muted">La PRS sera créée pour toute la semaine (lundi 00:00 au lundi suivant 00:00)</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Champs cachés pour les dates (pour compatibilité) -->
                                <input type="hidden" asp-for="Prs.DateDebut" id="hiddenDateDebut" />
                                <input type="hidden" asp-for="Prs.DateFin" id="hiddenDateFin" />
                            }

                            <div class="col-md-3 @(isAdminOrValidateur ? "d-flex align-items-end" : "")">
                                <button type="button" class="btn btn-primary w-100" id="suggest-slot-btn">
                                    <i class="fas fa-robot me-1"></i> ROB.I.A Analyser
                                </button>
                            </div>
                        </div>

                        <div class="mt-3 p-3 bg-info bg-opacity-10 rounded">
                            <small class="text-muted">
                                <i class="fas fa-info-circle text-info me-1"></i>
                                ROB.I.A analyse les créneaux disponibles en évitant les conflits de secteur et optimise selon l'équipement sélectionné.
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.LigneId" class="form-label">
                    <i class="fas fa-industry"></i>
                    Ligne
                </label>
                <select asp-for="Prs.LigneId" asp-items="Model.LigneList" class="form-select" id="ligne-select" required>
                    <option value="">-- Choisir une ligne --</option>
                </select>
                <span asp-validation-for="Prs.LigneId" class="text-danger"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Prs.FamilleId" class="form-label">
                    <i class="fas fa-layer-group"></i>
                    Famille de produit
                </label>
                <select asp-for="Prs.FamilleId" class="form-select">
                    <option value="">-- Aucune famille --</option>
                    @foreach (var fam in Model.Familles)
                    {
                        <option value="@fam.Id">@fam.Libelle</option>
                    }
                </select>
            </div>

            @if (isAdminOrValidateur)
            {
                <div class="col-md-6">
                    <label asp-for="Prs.CouleurPRS" class="form-label">
                        <i class="fas fa-palette"></i>
                        Couleur PRS
                        <span class="badge bg-warning text-dark ms-2">Admin/Validateur</span>
                    </label>
                    <div class="input-group">
                        <input asp-for="Prs.CouleurPRS" type="color" class="form-control form-control-color"
                               style="width: 60px; height: 38px;"
                               value="@(string.IsNullOrEmpty(Model.Prs.CouleurPRS) ? "#007bff" : Model.Prs.CouleurPRS)" />
                        <input asp-for="Prs.CouleurPRS" type="text" class="form-control"
                               placeholder="#FF5733" pattern="^#[0-9A-Fa-f]{6}$"
                               value="@Model.Prs.CouleurPRS" />
                        <button type="button" class="btn btn-outline-secondary" id="clearColor">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <small class="form-text text-muted">
                        <i class="fas fa-info-circle"></i>
                        Choisissez une couleur personnalisée pour cette PRS (optionnel)
                    </small>
                </div>
            }

            <div class="col-md-12">
                <label asp-for="Prs.InfoDiverses" class="form-label">
                    <i class="fas fa-comment-alt"></i>
                    Informations complémentaires
                </label>
                <textarea asp-for="Prs.InfoDiverses" class="form-control" rows="3"
                          placeholder="Ajoutez toute information utile pour cette PRS..."></textarea>
            </div>
            
            <!-- Nouvelle section pour l'upload de fichiers -->
            <div class="col-md-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-file-upload me-2"></i>Pièces jointes
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="file-upload-container" id="dropZone">
                            <i class="fas fa-cloud-upload-alt file-upload-icon"></i>
                            <p class="file-upload-text">
                                Glissez-déposez vos fichiers ici ou <strong>cliquez pour sélectionner</strong>
                            </p>
                            <input type="file" multiple name="UploadedFiles" class="file-upload-input" id="fileUpload" />
                            <div class="progress-container" id="uploadProgress">
                                <div class="progress-bar" id="progressBar"></div>
                            </div>
                            <p class="upload-limits">
                                <i class="fas fa-info-circle"></i>
                                Taille max: 100 Mo par fichier | Tous formats acceptés
                            </p>
                        </div>
                        <ul class="file-list" id="fileList"></ul>
                    </div>
                </div>
            </div>

            <div class="col-12 text-center">
                <button type="submit" class="btn btn-primary btn-lg px-5">
                    <i class="fas fa-plus-circle me-2"></i>Créer la PRS
                </button>
            </div>
        </form>
    </div>

    <!-- ROB.I.A - SUGGESTIONS INTELLIGENTES -->
    <div id="robia-suggestions" class="mt-4" style="display: none;">
        <div class="card border-success shadow-lg">
            <div class="card-header bg-gradient-success text-dark">
                <div class="d-flex align-items-center">
                    <i class="fas fa-robot robot-icon me-2 fs-4"></i>
                    <div>
                        <h5 class="mb-0">ROB.I.A - Suggestions Optimales</h5>
                        <small>Rapid Optimal Booking Intelligent Assistant • v1.0</small>
                    </div>
                    <div class="ms-auto">
                        <span class="badge bg-light text-dark">IA Active</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div id="suggestions-content"></div>
                <div class="mt-4 text-center">
                    <button type="button" class="btn btn-success btn-lg me-3" id="apply-suggestion">
                        <i class="fas fa-check-circle me-2"></i>Appliquer cette suggestion
                    </button>
                    <button type="button" class="btn btn-warning me-3" id="show-alternatives">
                        <i class="fas fa-sync-alt me-2"></i>Voir alternative suivante
                    </button>
                    <button type="button" class="btn btn-secondary" id="close-suggestions">
                        <i class="fas fa-times me-2"></i>Fermer
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- FIN ABSOLUE du page-container ICI -->
<!-- TITRE STYLÉ DU CALENDRIER -->
<div class="calendar-section-title">
    <h4 class="calendar-standalone-title">
        <i class="fas fa-calendar-alt"></i>
        Visualisation du planning (créneaux existants)
    </h4>
</div>

<!-- CALENDRIER SANS ARRIÈRE-PLAN -->
@Html.Partial("_CalendarBlock")

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Déterminer si l'utilisateur est admin ou validateur
        const isAdminOrValidateur = @Json.Serialize(isAdminOrValidateur);

        // Variables globales
        const dateDebutInput = document.querySelector("#Prs_DateDebut");
        const dateFinInput = document.querySelector("#Prs_DateFin");
        const ligneSelect = document.querySelector("#ligne-select");
        const equipementSelect = document.querySelector("#Prs_Equipement");
        let currentSuggestions = [];
        let selectedSuggestionIndex = 0;

        // Sélecteurs spécifiques selon le mode admin ou utilisateur
        const hiddenDateDebutInput = document.querySelector("#hiddenDateDebut");
        const hiddenDateFinInput = document.querySelector("#hiddenDateFin");
        const weekInfoElem = document.querySelector("#weekInfo");
        const weekDaysElem = document.querySelector("#weekDays");
        const weekHighlightElem = document.querySelector("#weekHighlight");
        const selectedWeekInput = document.querySelector("#selectedWeek");
        const durationSelect = document.querySelector("#duration-select");

        // Variable pour la semaine sélectionnée (pour utilisateurs normaux)
        let currentWeekStart = getMonday(new Date());

        @if (!isAdminOrValidateur)
        {
            <text>
                // Initialisation de la sélection de semaine pour les utilisateurs normaux
                initWeekSelector();

                // Mise à jour initiale des champs cachés pour semaine
                updateHiddenDateFields();
            </text>
        }

        @if (isAdminOrValidateur)
        {
            <text>
                // Gestion du sélecteur de couleur
                const colorPicker = document.querySelector('input[type="color"]');
                const colorText = document.querySelector('input[type="text"][name="Prs.CouleurPRS"]');
                const clearButton = document.getElementById('clearColor');

                if (colorPicker && colorText) {
                    colorPicker.addEventListener('change', function() {
                        colorText.value = this.value;
                    });

                    colorText.addEventListener('input', function() {
                        if (this.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                            colorPicker.value = this.value;
                        }
                    });

                    if (clearButton) {
                        clearButton.addEventListener('click', function() {
                            colorPicker.value = '#007bff';
                            colorText.value = '';
                        });
                    }
                }
                
                // Gestion du sélecteur de durée
                if (durationSelect) {
                    durationSelect.addEventListener('change', function() {
                        if (dateDebutInput) {
                            const heures = parseInt(this.value);
                            const dateDebut = new Date(dateDebutInput.value);
                            const dateFin = new Date(dateDebut);
                            dateFin.setHours(dateDebut.getHours() + heures);
                            
                            dateFinInput.value = formatInputDateTime(dateFin);
                        }
                    });
                }
            </text>
        }

        // Fonction pour obtenir le lundi d'une semaine donnée
        function getMonday(date) {
            const d = new Date(date);
            const day = d.getDay();
            const diff = d.getDate() - day + (day === 0 ? -6 : 1);
            return new Date(d.setDate(diff));
        }

        // Formater la date en texte français
        function formatDateFr(date) {
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('fr-FR', options);
        }

        // Formatage du nom du jour en français
        function getDayName(date) {
            return date.toLocaleDateString('fr-FR', { weekday: 'short' });
        }

        // Initialisation du sélecteur de semaine
        function initWeekSelector() {
            // Mettre à jour l'affichage de la semaine actuelle
            updateWeekDisplay();

            // Ajouter des écouteurs d'événements pour la navigation
            document.getElementById('prevWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);
                updateWeekDisplay();
            });

            document.getElementById('nextWeek').addEventListener('click', () => {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
                updateWeekDisplay();
            });
        }

        // Mettre à jour l'affichage de la semaine
        function updateWeekDisplay() {
            // Mettre à jour l'info de la semaine
            const weekEnd = new Date(currentWeekStart);
            weekEnd.setDate(weekEnd.getDate() + 6); // Dimanche

            weekInfoElem.textContent = `Semaine ${getWeekNumber(currentWeekStart)} - ${currentWeekStart.getFullYear()}`;
            weekHighlightElem.textContent = `Semaine du ${formatDateFr(currentWeekStart)} au ${formatDateFr(weekEnd)}`;

            // Mettre à jour le champ caché avec la date du lundi
            selectedWeekInput.value = currentWeekStart.toISOString();

            // Générer l'affichage des jours de la semaine
            weekDaysElem.innerHTML = '';

            for (let i = 0; i < 7; i++) {
                const day = new Date(currentWeekStart);
                day.setDate(day.getDate() + i);

                // Créer l'élément jour
                const dayElement = document.createElement('div');
                dayElement.className = 'week-day';

                const dayName = getDayName(day);
                const dayNumber = day.getDate();

                dayElement.innerHTML = `
                    <div class="day-name">${dayName}</div>
                    <div class="day-number">${dayNumber}</div>
                `;

                weekDaysElem.appendChild(dayElement);
            }

            // Mise à jour des champs cachés
            updateHiddenDateFields();
        }

        // Obtenir le numéro de semaine d'une date
        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
        }

        // Mettre à jour les champs cachés pour la semaine entière
        function updateHiddenDateFields() {
            if (!currentWeekStart) return;

            // La période va du lundi 00:00:00 au lundi suivant 00:00:00
            const mondayStart = new Date(currentWeekStart);
            mondayStart.setHours(0, 0, 0, 0);

            const nextMonday = new Date(mondayStart);
            nextMonday.setDate(nextMonday.getDate() + 7); // Lundi suivant à 00:00:00

            // Mettre à jour les champs cachés (format ISO)
            hiddenDateDebutInput.value = mondayStart.toISOString().slice(0, 16);
            hiddenDateFinInput.value = nextMonday.toISOString().slice(0, 16);
        }

        // ROB.I.A - Logique principale
        document.getElementById('suggest-slot-btn').addEventListener('click', function() {
            const btn = this;
            const ligneId = ligneSelect.value;

            if (!ligneId) {
                showRobiaNotification('Veuillez d\'abord sélectionner une ligne pour une analyse optimale.', 'warning');
                ligneSelect.focus();
                ligneSelect.style.borderColor = '#ffc107';
                setTimeout(() => ligneSelect.style.borderColor = '', 3000);
                return;
            }

            // Pour cette démo, nous allons simplement montrer une suggestion basique
            showRobiaNotification('ROB.I.A a analysé les disponibilités.', 'success');

            if (isAdminOrValidateur) {
                // Pour les administrateurs/validateurs, proposer un créneau normal
                showSuggestionForAdmin();
            } else {
                // Pour les utilisateurs normaux, proposer une semaine optimale
                showSuggestionForNormalUser();
            }
        });

        // Montrer une suggestion pour les administrateurs/validateurs
        function showSuggestionForAdmin() {
            const now = new Date();
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(9, 0, 0, 0);

            const tomorrowEnd = new Date(tomorrow);
            tomorrowEnd.setHours(17, 0, 0, 0);

            const suggestion = {
                dateDebut: tomorrow.toISOString(),
                dateFin: tomorrowEnd.toISOString(),
                score: 175,
                raison: "Ce créneau est optimal car aucune autre PRS n'est planifiée ce jour-là pour cette ligne. L'équipement sera disponible et l'équipe sera présente."
            };

            currentSuggestions = [suggestion];
            selectedSuggestionIndex = 0;

            showRobiaSuggestions();
        }

        // Montrer une suggestion pour les utilisateurs normaux
        function showSuggestionForNormalUser() {
            // Trouver la semaine prochaine
            const nextMonday = new Date(currentWeekStart);
            nextMonday.setDate(nextMonday.getDate() + 7);

            const nextSunday = new Date(nextMonday);
            nextSunday.setDate(nextSunday.getDate() + 6);

            const suggestion = {
                dateDebut: nextMonday.toISOString(),
                dateFin: nextSunday.toISOString(),
                score: 185,
                raison: "La semaine prochaine est optimale car elle est moins chargée que les semaines suivantes. L'équipe sera disponible toute la semaine et le planning est flexible."
            };

            currentSuggestions = [suggestion];
            selectedSuggestionIndex = 0;

            showRobiaSuggestions();
        }

        function showRobiaSuggestions() {
            const suggestionsDiv = document.getElementById('robia-suggestions');
            const contentDiv = document.getElementById('suggestions-content');

            if (currentSuggestions && currentSuggestions.length > 0) {
                const suggestion = currentSuggestions[selectedSuggestionIndex];

                let suggestionContent = '';

                if (isAdminOrValidateur) {
                    // Format pour admin/validateur: dates spécifiques
                    suggestionContent = `
                        <div class="suggestion-main border rounded-3 p-4 bg-gradient-light">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <h6 class="text-success mb-2">
                                            <i class="fas fa-calendar-alt text-primary"></i>
                                            Créneau Optimal Détecté
                                        </h6>
                                        <div class="fs-5 text-primary mb-3 fw-bold">
                                            <div class="mb-2">
                                                <i class="fas fa-play-circle text-success"></i>
                                                <strong>Début :</strong> ${formatDateTimeFr(suggestion.dateDebut)}
                                            </div>
                                            <div>
                                                <i class="fas fa-stop-circle text-danger"></i>
                                                <strong>Fin :</strong> ${formatDateTimeFr(suggestion.dateFin)}
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3 p-3 bg-info bg-opacity-10 rounded">
                                        <h6 class="text-info mb-2">
                                            <i class="fas fa-lightbulb"></i> Analyse ROB.I.A
                                        </h6>
                                        <p class="mb-0 text-muted">${suggestion.raison}</p>
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="p-3 rounded bg-primary text-white">
                                        <div class="mb-2">
                                            <i class="fas fa-trophy text-white"></i>
                                            <strong>Score ROB.I.A</strong>
                                        </div>
                                        <div style="font-size: 2.5rem; font-weight: bold;">${suggestion.score}</div>
                                        <small class="opacity-75">/ 200 points</small>
                                        <div class="mt-2">
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar bg-white" style="width: ${(suggestion.score / 200) * 100}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                } else {
                    // Format pour utilisateur normal: semaine entière
                    const startDate = new Date(suggestion.dateDebut);
                    const endDate = new Date(suggestion.dateFin);

                    const weekNumber = getWeekNumber(startDate);
                    const weekText = `Semaine ${weekNumber} - ${startDate.getFullYear()}`;
                    const dateRangeText = `Semaine du ${formatDateFr(startDate)} au ${formatDateFr(endDate)}`;

                    suggestionContent = `
                        <div class="suggestion-main border rounded-3 p-4 bg-gradient-light">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <h6 class="text-success mb-2">
                                            <i class="fas fa-calendar-week text-primary"></i>
                                            Semaine Optimale Détectée
                                        </h6>
                                        <div class="fs-5 text-primary mb-3 fw-bold">
                                            <div class="mb-2">
                                                ${weekText}
                                            </div>
                                            <div>
                                                ${dateRangeText}
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3 p-3 bg-info bg-opacity-10 rounded">
                                        <h6 class="text-info mb-2">
                                            <i class="fas fa-lightbulb"></i> Analyse ROB.I.A
                                        </h6>
                                        <p class="mb-0 text-muted">${suggestion.raison}</p>
                                    </div>
                                </div>
                                <div class="col-md-4 text-center">
                                    <div class="p-3 rounded bg-primary text-white">
                                        <div class="mb-2">
                                            <i class="fas fa-trophy text-white"></i>
                                            <strong>Score ROB.I.A</strong>
                                        </div>
                                        <div style="font-size: 2.5rem; font-weight: bold;">${suggestion.score}</div>
                                        <small class="opacity-75">/ 200 points</small>
                                        <div class="mt-2">
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar bg-white" style="width: ${(suggestion.score / 200) * 100}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                }

                contentDiv.innerHTML = suggestionContent;
                suggestionsDiv.style.display = 'block';
                suggestionsDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        function formatDateTimeFr(dateStr) {
            const date = new Date(dateStr);

            const options = {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };

            return date.toLocaleDateString('fr-FR', options);
        }

        // Actions sur les suggestions
        document.getElementById('apply-suggestion').addEventListener('click', function() {
            if (currentSuggestions.length > 0) {
                const suggestion = currentSuggestions[selectedSuggestionIndex];

                if (isAdminOrValidateur) {
                    // Mode admin : mettre à jour les champs de date directement
                    const localStart = new Date(suggestion.dateDebut);
                    const localEnd = new Date(suggestion.dateFin);

                    dateDebutInput.value = formatInputDateTime(localStart);
                    dateFinInput.value = formatInputDateTime(localEnd);
                } else {
                    // Mode utilisateur : mettre à jour la semaine sélectionnée
                    const suggestionWeekStart = new Date(suggestion.dateDebut);
                    currentWeekStart = new Date(suggestionWeekStart);
                    updateWeekDisplay();
                }

                document.getElementById('robia-suggestions').style.display = 'none';
                showRobiaNotification('Suggestion appliquée avec succès !', 'success');
            }
        });

        document.getElementById('close-suggestions').addEventListener('click', function() {
            document.getElementById('robia-suggestions').style.display = 'none';
        });

        document.getElementById('show-alternatives').addEventListener('click', function() {
            showRobiaNotification("Désolé, pas d'alternatives disponibles pour le moment.", 'info');
        });

        // Formatage de date-heure pour les champs input
        function formatInputDateTime(date) {
            return date.toISOString().slice(0, 16);
        }

        function showRobiaNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} border-0 shadow-sm`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                width: 380px;
                max-width: 90vw;
            `;

            const icons = {
                success: 'fas fa-check-circle',
                warning: 'fas fa-exclamation-triangle',
                danger: 'fas fa-times-circle',
                info: 'fas fa-info-circle'
            };

            notification.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-robot me-2"></i>
                    <div class="flex-grow-1">
                        <strong>ROB.I.A:</strong> ${message}
                    </div>
                    <i class="${icons[type]} ms-2"></i>
                    <button type="button" class="btn-close ms-2" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.5s';
                setTimeout(() => {
                    notification.remove();
                }, 500);
            }, 5000);
        }

        // Validation du formulaire
        document.querySelector("#create-form").addEventListener("submit", function (e) {
            if (isAdminOrValidateur) {
                // Validation des dates pour admin/validateur
                const dateDebut = new Date(dateDebutInput.value);
                const dateFin = new Date(dateFinInput.value);

                if (dateFin <= dateDebut) {
                    e.preventDefault();
                    showRobiaNotification('La date de début doit être antérieure à la date de fin.', 'danger');
                    return false;
                }
            }

            // Vérification que la ligne est sélectionnée
            if (!ligneSelect.value) {
                e.preventDefault();
                showRobiaNotification('Veuillez sélectionner une ligne.', 'danger');
                ligneSelect.focus();
                return false;
            }
        });

        // Gestion de l'upload des fichiers
        document.addEventListener('DOMContentLoaded', function() {
            const dropZone = document.getElementById('dropZone');
            const fileInput = document.getElementById('fileUpload');
            const fileList = document.getElementById('fileList');
            const progressContainer = document.getElementById('uploadProgress');
            const progressBar = document.getElementById('progressBar');
            
            // Stocker les fichiers sélectionnés
            let selectedFiles = [];
            
            // Fonction pour formater la taille du fichier
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Fonction pour déterminer l'icône en fonction du type de fichier
            function getFileIcon(fileName) {
                const extension = fileName.split('.').pop().toLowerCase();
                
                const icons = {
                    'pdf': 'fas fa-file-pdf',
                    'doc': 'fas fa-file-word',
                    'docx': 'fas fa-file-word',
                    'xls': 'fas fa-file-excel',
                    'xlsx': 'fas fa-file-excel',
                    'ppt': 'fas fa-file-powerpoint',
                    'pptx': 'fas fa-file-powerpoint',
                    'txt': 'fas fa-file-alt',
                    'csv': 'fas fa-file-csv',
                    'jpg': 'fas fa-file-image',
                    'jpeg': 'fas fa-file-image',
                    'png': 'fas fa-file-image',
                    'gif': 'fas fa-file-image',
                    'zip': 'fas fa-file-archive',
                    'rar': 'fas fa-file-archive',
                    '7z': 'fas fa-file-archive'
                };
                
                return icons[extension] || 'fas fa-file';
            }

            // Fonction pour mettre à jour la liste de fichiers dans l'UI
            function updateFileListUI() {
                fileList.innerHTML = '';
                
                selectedFiles.forEach((file, index) => {
                    const fileItem = document.createElement('li');
                    fileItem.className = 'file-item';
                    
                    const fileIcon = document.createElement('i');
                    fileIcon.className = `file-icon ${getFileIcon(file.name)}`;
                    
                    const fileName = document.createElement('span');
                    fileName.className = 'file-name';
                    fileName.textContent = file.name;
                    
                    const fileSize = document.createElement('span');
                    fileSize.className = 'file-size';
                    fileSize.textContent = formatFileSize(file.size);
                    
                    const removeButton = document.createElement('i');
                    removeButton.className = 'remove-file fas fa-times-circle';
                    removeButton.setAttribute('title', 'Supprimer');
                    removeButton.addEventListener('click', function() {
                        selectedFiles.splice(index, 1);
                        updateFileListUI();
                        updateHiddenFileInput();
                    });
                    
                    fileItem.appendChild(fileIcon);
                    fileItem.appendChild(fileName);
                    fileItem.appendChild(fileSize);
                    fileItem.appendChild(removeButton);
                    
                    fileList.appendChild(fileItem);
                });
            }
            
            // Fonction pour créer un input file caché avec les fichiers sélectionnés
            function updateHiddenFileInput() {
                // Nous ne pouvons pas facilement manipuler le contenu d'un input file.
                // Dans un cas réel, on utiliserait FormData pour l'envoi
                // Mais pour notre maquette, cette fonction est un placeholder
            }
            
            // Fonction pour ajouter des fichiers à notre collection
            function addFiles(files) {
                if (!files || !files.length) return;
                
                // Pour chaque fichier sélectionné
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    
                    // Vérifier la taille maximale
                    if (file.size > 100 * 1024 * 1024) {
                        showRobiaNotification(`Le fichier ${file.name} est trop volumineux (maximum 100 Mo)`, 'warning');
                        continue;
                    }
                    
                    // Vérifier si un fichier avec le même nom existe déjà
                    const existingIndex = selectedFiles.findIndex(f => f.name === file.name);
                    if (existingIndex >= 0) {
                        // Remplacer le fichier existant
                        selectedFiles[existingIndex] = file;
                    } else {
                        // Ajouter le nouveau fichier
                        selectedFiles.push(file);
                    }
                }
                
                // Mettre à jour l'interface utilisateur
                updateFileListUI();
                
                // Afficher la progression
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';
                
                let progress = 0;
                const interval = setInterval(() => {
                    progress += 5;
                    progressBar.style.width = `${Math.min(progress, 100)}%`;
                    
                    if (progress >= 100) {
                        clearInterval(interval);
                        setTimeout(() => {
                            progressContainer.style.display = 'none';
                        }, 500);
                    }
                }, 50);
            }

            // Événement lors de la sélection de fichiers par le input file
            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    addFiles(this.files);
                });
            }

            // Événements pour le drag & drop
            if (dropZone) {
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropZone.addEventListener(eventName, (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });
                
                dropZone.addEventListener('dragenter', () => {
                    dropZone.classList.add('dragover');
                });
                
                dropZone.addEventListener('dragover', () => {
                    dropZone.classList.add('dragover');
                });
                
                dropZone.addEventListener('dragleave', () => {
                    dropZone.classList.remove('dragover');
                });
                
                dropZone.addEventListener('drop', (e) => {
                    dropZone.classList.remove('dragover');
                    
                    // Ajouter les fichiers déposés
                    addFiles(e.dataTransfer.files);
                });
            }

                            // Lors de la soumission du formulaire, nous devons copier les fichiers sélectionnés dans l'input file
                document.querySelector('#create-form').addEventListener('submit', function(e) {
                    if (selectedFiles.length > 0) {
                        try {
                            // Créer un nouveau DataTransfer object
                            const dataTransfer = new DataTransfer();

                            // Ajouter chaque fichier sélectionné
                            selectedFiles.forEach(file => {
                                dataTransfer.items.add(file);
                            });

                            // Assigner les fichiers à l'input file
                            fileInput.files = dataTransfer.files;
                        } catch (error) {
                            console.error("Erreur lors de la préparation des fichiers pour l'envoi", error);
                            // Ne pas bloquer la soumission du formulaire si cette étape échoue
                        }
                    }
                });
            });

            // Initialisation
            setTimeout(() => {
                showRobiaNotification('ROB.I.A prêt à optimiser vos planifications !', 'success');
            }, 1000);
        </script>
}